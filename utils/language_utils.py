"""
Language utilities for the Intelligent FIR System.
Provides language codes, names, and translation functionality.
"""

import logging
from flask import session, request

# Configure logging
logger = logging.getLogger(__name__)

# Supported languages with their codes for speech recognition
SUPPORTED_LANGUAGES = {
    'en-US': {
        'name': 'English (US)',
        'native_name': 'English (US)',
        'flag': 'ЁЯЗ║ЁЯЗ╕',
        'speech_code': 'en-US',
        'direction': 'ltr'
    },
    'en-GB': {
        'name': 'English (UK)',
        'native_name': 'English (UK)',
        'flag': 'ЁЯЗмЁЯЗз',
        'speech_code': 'en-GB',
        'direction': 'ltr'
    },
    'en-IN': {
        'name': 'English (India)',
        'native_name': 'English (India)',
        'flag': 'ЁЯЗоЁЯЗ│',
        'speech_code': 'en-IN',
        'direction': 'ltr'
    },
    'hi-IN': {
        'name': 'Hindi',
        'native_name': 'рд╣рд┐рдиреНрджреА',
        'flag': 'ЁЯЗоЁЯЗ│',
        'speech_code': 'hi-IN',
        'direction': 'ltr'
    },
    'bn-IN': {
        'name': 'Bengali',
        'native_name': 'ржмрж╛ржВрж▓рж╛',
        'flag': 'ЁЯЗоЁЯЗ│',
        'speech_code': 'bn-IN',
        'direction': 'ltr'
    },
    'ta-IN': {
        'name': 'Tamil',
        'native_name': 'родрооро┐ро┤рпН',
        'flag': 'ЁЯЗоЁЯЗ│',
        'speech_code': 'ta-IN',
        'direction': 'ltr'
    },
    'te-IN': {
        'name': 'Telugu',
        'native_name': 'р░др▒Жр░▓р▒Бр░Чр▒Б',
        'flag': 'ЁЯЗоЁЯЗ│',
        'speech_code': 'te-IN',
        'direction': 'ltr'
    },
    'mr-IN': {
        'name': 'Marathi',
        'native_name': 'рдорд░рд╛рдареА',
        'flag': 'ЁЯЗоЁЯЗ│',
        'speech_code': 'mr-IN',
        'direction': 'ltr'
    },
    'gu-IN': {
        'name': 'Gujarati',
        'native_name': 'ркЧрлБркЬрк░рк╛ркдрлА',
        'flag': 'ЁЯЗоЁЯЗ│',
        'speech_code': 'gu-IN',
        'direction': 'ltr'
    },
    'kn-IN': {
        'name': 'Kannada',
        'native_name': 'р▓Хр▓ир│Нр▓ир▓б',
        'flag': 'ЁЯЗоЁЯЗ│',
        'speech_code': 'kn-IN',
        'direction': 'ltr'
    },
    'ml-IN': {
        'name': 'Malayalam',
        'native_name': 'р┤ор┤▓р┤пр┤╛р┤│р┤В',
        'flag': 'ЁЯЗоЁЯЗ│',
        'speech_code': 'ml-IN',
        'direction': 'ltr'
    },
    'pa-IN': {
        'name': 'Punjabi',
        'native_name': 'рикрй░риЬри╛римрйА',
        'flag': 'ЁЯЗоЁЯЗ│',
        'speech_code': 'pa-IN',
        'direction': 'ltr'
    }
}

# Default language code
DEFAULT_LANGUAGE = 'en-IN'

# Basic translations for common UI elements
TRANSLATIONS = {
    'en-US': {
        'file_complaint': 'File a Complaint',
        'record_voice': 'Record Voice',
        'stop_recording': 'Stop Recording',
        'transcribing': 'Transcribing...',
        'analyze_legal': 'Analyze Legal Sections',
        'submit': 'Submit',
        'incident_description': 'Incident Description',
        'incident_date': 'Incident Date & Time',
        'incident_location': 'Incident Location',
        'evidence_upload': 'Upload Evidence',
        'language_select': 'Select Language',
        'ready_to_record': 'Ready to record',
        'recording': 'Recording... Speak now',
        'processing': 'Processing...',
        'transcription_complete': 'Transcription complete',
        'transcription_failed': 'Transcription failed. Please try again or type manually.',
        'analyzing_legal': 'Analyzing applicable IPC sections...',
        'legal_sections': 'Applicable IPC Sections',
        'confidence': 'Confidence',
        'include_in_fir': 'Include in FIR',
        'no_sections_found': 'No applicable IPC sections found. Please review the incident description.'
    },
    'en-GB': {
        # Same as en-US for now
    },
    'en-IN': {
        # Same as en-US for now
    },
    'hi-IN': {
        'file_complaint': 'рд╢рд┐рдХрд╛рдпрдд рджрд░реНрдЬ рдХрд░реЗрдВ',
        'record_voice': 'рдЖрд╡рд╛рдЬрд╝ рд░рд┐рдХреЙрд░реНрдб рдХрд░реЗрдВ',
        'stop_recording': 'рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ рдмрдВрдж рдХрд░реЗрдВ',
        'transcribing': 'рдкреНрд░рддрд┐рд▓реЗрдЦрди рд╣реЛ рд░рд╣рд╛ рд╣реИ...',
        'analyze_legal': 'рдХрд╛рдиреВрдиреА рдзрд╛рд░рд╛рдУрдВ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░реЗрдВ',
        'submit': 'рдЬрдорд╛ рдХрд░реЗрдВ',
        'incident_description': 'рдШрдЯрдирд╛ рдХрд╛ рд╡рд┐рд╡рд░рдг',
        'incident_date': 'рдШрдЯрдирд╛ рдХреА рддрд╛рд░реАрдЦ рдФрд░ рд╕рдордп',
        'incident_location': 'рдШрдЯрдирд╛ рдХрд╛ рд╕реНрдерд╛рди',
        'evidence_upload': 'рд╕рдмреВрдд рдЕрдкрд▓реЛрдб рдХрд░реЗрдВ',
        'language_select': 'рднрд╛рд╖рд╛ рдЪреБрдиреЗрдВ',
        'ready_to_record': 'рд░рд┐рдХреЙрд░реНрдб рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░',
        'recording': 'рд░рд┐рдХреЙрд░реНрдбрд┐рдВрдЧ... рдЕрдм рдмреЛрд▓реЗрдВ',
        'processing': 'рдкреНрд░реЛрд╕реЗрд╕рд┐рдВрдЧ...',
        'transcription_complete': 'рдкреНрд░рддрд┐рд▓реЗрдЦрди рдкреВрд░рд╛ рд╣реБрдЖ',
        'transcription_failed': 'рдкреНрд░рддрд┐рд▓реЗрдЦрди рд╡рд┐рдлрд▓ред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдкреНрд░рдпрд╛рд╕ рдХрд░реЗрдВ рдпрд╛ рдореИрдиреНрдпреБрдЕрд▓ рд░реВрдк рд╕реЗ рдЯрд╛рдЗрдк рдХрд░реЗрдВред',
        'analyzing_legal': 'рд▓рд╛рдЧреВ IPC рдзрд╛рд░рд╛рдУрдВ рдХрд╛ рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд┐рдпрд╛ рдЬрд╛ рд░рд╣рд╛ рд╣реИ...',
        'legal_sections': 'рд▓рд╛рдЧреВ IPC рдзрд╛рд░рд╛рдПрдБ',
        'confidence': 'рд╡рд┐рд╢реНрд╡рд╛рд╕ рд╕реНрддрд░',
        'include_in_fir': 'FIR рдореЗрдВ рд╢рд╛рдорд┐рд▓ рдХрд░реЗрдВ',
        'no_sections_found': 'рдХреЛрдИ рд▓рд╛рдЧреВ IPC рдзрд╛рд░рд╛ рдирд╣реАрдВ рдорд┐рд▓реАред рдХреГрдкрдпрд╛ рдШрдЯрдирд╛ рдХреЗ рд╡рд┐рд╡рд░рдг рдХреА рд╕рдореАрдХреНрд╖рд╛ рдХрд░реЗрдВред'
    }
    # Add more translations for other languages as needed
}

def get_user_language():
    """Get the user's preferred language from session or default to browser language."""
    # First check if language is set in session
    if 'language' in session:
        lang_code = session['language']
        if lang_code in SUPPORTED_LANGUAGES:
            return lang_code
    
    # Then check browser's Accept-Language header
    if request.accept_languages:
        for lang_code, _ in request.accept_languages:
            # Check if the language code matches any of our supported languages
            for supported_code in SUPPORTED_LANGUAGES:
                if lang_code.startswith(supported_code.split('-')[0]):
                    return supported_code
    
    # Default to English (India)
    return DEFAULT_LANGUAGE

def set_user_language(lang_code):
    """Set the user's preferred language in session."""
    if lang_code in SUPPORTED_LANGUAGES:
        session['language'] = lang_code
        return True
    return False

def get_translation(key, lang_code=None):
    """Get translation for a key in the specified language."""
    if not lang_code:
        lang_code = get_user_language()
    
    # If language not supported or key not found, fall back to English
    if lang_code not in TRANSLATIONS or key not in TRANSLATIONS[lang_code]:
        return TRANSLATIONS['en-US'].get(key, key)
    
    return TRANSLATIONS[lang_code].get(key, key)

def get_speech_recognition_language(lang_code=None):
    """Get the speech recognition language code."""
    if not lang_code:
        lang_code = get_user_language()
    
    if lang_code in SUPPORTED_LANGUAGES:
        return SUPPORTED_LANGUAGES[lang_code]['speech_code']
    
    return 'en-US'  # Default to US English
