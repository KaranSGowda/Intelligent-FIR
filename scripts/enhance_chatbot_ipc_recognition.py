"""Script to enhance the chatbot's ability to recognize and respond to IPC section queries.

This script updates the chatbot to better handle queries about IPC sections,
including improved pattern matching and response generation.
"""

import os
import sys
import logging
import re

# Add the parent directory to the path so we can import the app
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))

# Configure logging
logging.basicConfig(level=logging.INFO,
                    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
                    handlers=[logging.StreamHandler(sys.stdout)])

logger = logging.getLogger(__name__)

def enhance_ipc_patterns():
    """Enhance the chatbot's patterns for recognizing IPC section queries."""
    try:
        from app import create_app
        from models import LegalSection
        
        app = create_app()
        
        with app.app_context():
            # Get all IPC sections from the database
            sections = LegalSection.query.order_by(LegalSection.code).all()
            section_codes = [section.code for section in sections]
            
            # Create a regex pattern that matches any of the section codes
            section_pattern = '|'.join(section_codes)
            
            # Define enhanced patterns for IPC section queries
            ipc_patterns = [
                # Direct queries about a specific section
                rf'(?:what is|tell me about|explain|describe) (?:the )?(?:ipc )?(?:section )?({section_pattern})\b',
                rf'(?:ipc )?(?:section )?({section_pattern})\b(?:.*)(?:mean|say|state|define)',
                
                # Queries about applicability of a section
                rf'(?:does|when does|how does) (?:the )?(?:ipc )?(?:section )?({section_pattern})\b(?:.*) apply',
                rf'(?:is|can) (?:the )?(?:ipc )?(?:section )?({section_pattern})\b(?:.*) applicable',
                
                # Queries about punishment under a section
                rf'(?:what is|tell me about) (?:the )?punishment (?:for|under) (?:the )?(?:ipc )?(?:section )?({section_pattern})\b',
                
                # General queries about IPC sections
                r'(?:what are|list|tell me about) (?:the )?(?:common|important|major) (?:ipc )?sections',
                r'(?:what are|list|tell me about) (?:the )?(?:ipc )?sections (?:for|related to) (.*)',
            ]
            
            logger.info(f"Created enhanced patterns for {len(section_codes)} IPC sections")
            
            # Create a Python file with the enhanced patterns
            with open('utils/enhanced_ipc_patterns.py', 'w') as f:
                f.write("""# Enhanced patterns for IPC section queries

# This file is auto-generated by enhance_chatbot_ipc_recognition.py

""")
                
                f.write("# List of all IPC section codes\n")
                f.write(f"ALL_IPC_SECTION_CODES = {section_codes}\n\n")
                
                f.write("# Enhanced patterns for IPC section queries\n")
                f.write("ENHANCED_IPC_PATTERNS = [\n")
                for pattern in ipc_patterns:
                    f.write(f"    r'{pattern}',\n")
                f.write("]\n")
            
            logger.info(f"Saved enhanced patterns to utils/enhanced_ipc_patterns.py")
            return True
    
    except Exception as e:
        logger.error(f"Error enhancing IPC patterns: {str(e)}")
        return False

def update_chatbot_file():
    """Update the chatbot.py file to include enhanced IPC section handling."""
    try:
        # Read the current chatbot.py file
        with open('utils/chatbot.py', 'r') as f:
            chatbot_content = f.read()
        
        # Check if the file already has the enhanced IPC handling
        if "from utils.enhanced_ipc_patterns import" in chatbot_content:
            logger.info("Chatbot file already has enhanced IPC handling")
            return True
        
        # Find the import section and add the import for enhanced patterns
        import_pattern = r'(from models import .*?)\n\n'
        if re.search(import_pattern, chatbot_content):
            updated_content = re.sub(
                import_pattern,
                r'\1\n# Import enhanced IPC patterns\ntry:\n    from utils.enhanced_ipc_patterns import ALL_IPC_SECTION_CODES, ENHANCED_IPC_PATTERNS\n    ENHANCED_IPC_AVAILABLE = True\nexcept ImportError:\n    ENHANCED_IPC_AVAILABLE = False\n    ALL_IPC_SECTION_CODES = []\n    ENHANCED_IPC_PATTERNS = []\n\n',
                chatbot_content
            )
        else:
            logger.error("Could not find import section in chatbot.py")
            return False
        
        # Find the __init__ method and add the enhanced patterns
        init_pattern = r'(def __init__\(self\):.*?self\.patterns = \{.*?)\}'
        if re.search(init_pattern, chatbot_content, re.DOTALL):
            updated_content = re.sub(
                init_pattern,
                r'\1,\n            \'ipc_section\': ENHANCED_IPC_PATTERNS if ENHANCED_IPC_AVAILABLE else [\n                r\'what is (?:ipc )?section (\\d+[A-Za-z]?)\',\n                r\'tell me about (?:ipc )?section (\\d+[A-Za-z]?)\',\n                r\'explain (?:ipc )?section (\\d+[A-Za-z]?)\',\n            ]\n        }',
                updated_content,
                flags=re.DOTALL
            )
        else:
            logger.error("Could not find __init__ method in chatbot.py")
            return False
        
        # Add a method to check if a query is about any IPC section
        if "_is_ipc_section_query" not in chatbot_content:
            # Find a good place to add the method (after _get_section_info)
            section_info_pattern = r'(def _get_section_info.*?return self\._create_response\(.*?\)\n\n)'
            if re.search(section_info_pattern, chatbot_content, re.DOTALL):
                updated_content = re.sub(
                    section_info_pattern,
                    r'\1    def _is_ipc_section_query(self, query):\n        """Check if a query is about any IPC section."""\n        # Check if the query contains IPC or section\n        if \'ipc\' in query.lower() or \'section\' in query.lower():\n            # Check for section numbers - allow for 1-3 digits followed by optional letter\n            section_matches = re.findall(r\'(\\d{1,3}[A-Za-z]?)\', query)\n            if section_matches and ENHANCED_IPC_AVAILABLE:\n                # Check if any of the matches are valid IPC section codes\n                for match in section_matches:\n                    if match in ALL_IPC_SECTION_CODES:\n                        return match\n            elif section_matches:\n                # If enhanced IPC is not available, just return the first match\n                return section_matches[0]\n        return None\n\n',
                    updated_content,
                    flags=re.DOTALL
                )
            else:
                logger.error("Could not find _get_section_info method in chatbot.py")
                return False
        
        # Enhance the process_query method to use the new _is_ipc_section_query method
        process_query_pattern = r'(def process_query\(self, query\):.*?# Check for patterns.*?)for pattern_type, patterns in self\.patterns\.items\(\):'
        if re.search(process_query_pattern, chatbot_content, re.DOTALL):
            updated_content = re.sub(
                process_query_pattern,
                r'\1# First check if this is a query about any IPC section\n        section_code = self._is_ipc_section_query(query)\n        if section_code:\n            logger.info(f"Identified query about IPC section {section_code}")\n            return self._get_section_info(section_code)\n\n        for pattern_type, patterns in self.patterns.items():\n',
                updated_content,
                flags=re.DOTALL
            )
        else:
            logger.error("Could not find process_query method in chatbot.py")
            return False
        
        # Write the updated content back to the file
        with open('utils/chatbot.py', 'w') as f:
            f.write(updated_content)
        
        logger.info("Successfully updated chatbot.py with enhanced IPC section handling")
        return True
    
    except Exception as e:
        logger.error(f"Error updating chatbot file: {str(e)}")
        return False

def main():
    """Main function to run the script."""
    logger.info("Enhancing chatbot's ability to recognize IPC sections...")
    
    # Step 1: Enhance IPC patterns
    if enhance_ipc_patterns():
        logger.info("Successfully enhanced IPC patterns")
    else:
        logger.error("Failed to enhance IPC patterns")
        return
    
    # Step 2: Update the chatbot file
    if update_chatbot_file():
        logger.info("Successfully updated chatbot file")
    else:
        logger.error("Failed to update chatbot file")
        return
    
    logger.info("Chatbot enhancement completed successfully!")

if __name__ == "__main__":
    main()